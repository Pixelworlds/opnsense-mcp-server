export interface ApiEndpoint {
  module: string;
  controller: string;
  action: string;
  method: 'GET' | 'POST' | 'PUT' | 'DELETE';
  path: string;
  description: string;
  parameters?: Parameter[];
  body?: any;
  category: string;
  requiresAuth: boolean;
  responseType?: string;
}

export interface Parameter {
  name: string;
  type: string;
  required: boolean;
  description: string;
  default?: any;
  enum?: string[];
}

export const CORE_API_MODULES = {
  SYSTEM: {
    name: 'Core System',
    description: 'Core system management and monitoring',
    endpoints: [
      {
        module: 'core',
        controller: 'system',
        action: 'status',
        method: 'GET',
        path: '/core/system/status',
        description: 'Get comprehensive system status including uptime, CPU, memory, and disk usage',
        category: 'System Information',
        requiresAuth: true,
        responseType: 'SystemStatus',
      },
      {
        module: 'core',
        controller: 'system',
        action: 'reboot',
        method: 'POST',
        path: '/core/system/reboot',
        description: 'Reboot the OPNsense system with optional delay',
        category: 'System Control',
        requiresAuth: true,
        parameters: [
          {
            name: 'delay',
            type: 'integer',
            required: false,
            description: 'Delay in seconds before reboot',
            default: 0,
          },
        ],
      },
      {
        module: 'core',
        controller: 'system',
        action: 'halt',
        method: 'POST',
        path: '/core/system/halt',
        description: 'Halt (power off) the OPNsense system',
        category: 'System Control',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'system',
        action: 'dismiss_status',
        method: 'POST',
        path: '/core/system/dismiss_status',
        description: 'Dismiss system status notifications and alerts',
        category: 'System Control',
        requiresAuth: true,
      },
    ],
  },

  BACKUP: {
    name: 'Backup Management',
    description: 'Configuration backup and restore operations',
    endpoints: [
      {
        module: 'core',
        controller: 'backup',
        action: 'backups',
        method: 'GET',
        path: '/core/backup/backups/{host}',
        description: 'Get list of configuration backups for a specific host',
        category: 'Backup',
        requiresAuth: true,
        parameters: [{ name: 'host', type: 'string', required: true, description: 'Host identifier' }],
      },
      {
        module: 'core',
        controller: 'backup',
        action: 'delete_backup',
        method: 'POST',
        path: '/core/backup/delete_backup/{backup}',
        description: 'Delete a specific configuration backup',
        category: 'Backup',
        requiresAuth: true,
        parameters: [{ name: 'backup', type: 'string', required: true, description: 'Backup identifier' }],
      },
      {
        module: 'core',
        controller: 'backup',
        action: 'diff',
        method: 'POST',
        path: '/core/backup/diff/{host}/{backup1}/{backup2}',
        description: 'Compare two configuration backups to see differences',
        category: 'Backup',
        requiresAuth: true,
        parameters: [
          { name: 'host', type: 'string', required: true, description: 'Host identifier' },
          { name: 'backup1', type: 'string', required: true, description: 'First backup to compare' },
          { name: 'backup2', type: 'string', required: true, description: 'Second backup to compare' },
        ],
      },
      {
        module: 'core',
        controller: 'backup',
        action: 'download',
        method: 'GET',
        path: '/core/backup/download/{host}/{backup}',
        description: 'Download a backup file as XML',
        category: 'Backup',
        requiresAuth: true,
        parameters: [
          { name: 'host', type: 'string', required: true, description: 'Host identifier' },
          { name: 'backup', type: 'string', required: true, description: 'Backup identifier' },
        ],
        responseType: 'file/xml',
      },
      {
        module: 'core',
        controller: 'backup',
        action: 'providers',
        method: 'GET',
        path: '/core/backup/providers',
        description: 'Get available backup providers (local, nextcloud, google drive)',
        category: 'Backup',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'backup',
        action: 'revert_backup',
        method: 'POST',
        path: '/core/backup/revert_backup/{backup}',
        description: 'Revert configuration to a specific backup',
        category: 'Backup',
        requiresAuth: true,
        parameters: [{ name: 'backup', type: 'string', required: true, description: 'Backup to revert to' }],
      },
    ],
  },

  DASHBOARD: {
    name: 'Dashboard',
    description: 'Dashboard widgets and configuration',
    endpoints: [
      {
        module: 'core',
        controller: 'dashboard',
        action: 'get_dashboard',
        method: 'GET',
        path: '/core/dashboard/get_dashboard',
        description: 'Get dashboard widget configuration',
        category: 'Dashboard',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'dashboard',
        action: 'save_widgets',
        method: 'POST',
        path: '/core/dashboard/save_widgets',
        description: 'Save dashboard widget configuration',
        category: 'Dashboard',
        requiresAuth: true,
        body: {
          widgets: 'array of widget configurations',
        },
      },
      {
        module: 'core',
        controller: 'dashboard',
        action: 'restore_defaults',
        method: 'POST',
        path: '/core/dashboard/restore_defaults',
        description: 'Restore dashboard to default widget configuration',
        category: 'Dashboard',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'dashboard',
        action: 'product_info_feed',
        method: 'GET',
        path: '/core/dashboard/product_info_feed',
        description: 'Get product information feed (news, updates)',
        category: 'Dashboard',
        requiresAuth: true,
      },
    ],
  },

  SERVICE: {
    name: 'Service Management',
    description: 'Control system services',
    endpoints: [
      {
        module: 'core',
        controller: 'service',
        action: 'search',
        method: 'POST',
        path: '/core/service/search',
        description: 'Search and list system services with their status',
        category: 'Services',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'core',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/core/service/start/{name}/{id}',
        description: 'Start a specific service',
        category: 'Services',
        requiresAuth: true,
        parameters: [
          { name: 'name', type: 'string', required: true, description: 'Service name' },
          { name: 'id', type: 'string', required: false, description: 'Service instance ID' },
        ],
      },
      {
        module: 'core',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/core/service/stop/{name}/{id}',
        description: 'Stop a specific service',
        category: 'Services',
        requiresAuth: true,
        parameters: [
          { name: 'name', type: 'string', required: true, description: 'Service name' },
          { name: 'id', type: 'string', required: false, description: 'Service instance ID' },
        ],
      },
      {
        module: 'core',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/core/service/restart/{name}/{id}',
        description: 'Restart a specific service',
        category: 'Services',
        requiresAuth: true,
        parameters: [
          { name: 'name', type: 'string', required: true, description: 'Service name' },
          { name: 'id', type: 'string', required: false, description: 'Service instance ID' },
        ],
      },
    ],
  },

  FIRMWARE: {
    name: 'Firmware Management',
    description: 'System firmware and package management',
    endpoints: [
      {
        module: 'core',
        controller: 'firmware',
        action: 'info',
        method: 'GET',
        path: '/core/firmware/info',
        description: 'Get firmware version and system information',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'status',
        method: 'GET',
        path: '/core/firmware/status',
        description: 'Get firmware update status and running tasks',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'check',
        method: 'POST',
        path: '/core/firmware/check',
        description: 'Check for available firmware updates',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'update',
        method: 'POST',
        path: '/core/firmware/update',
        description: 'Update packages and patches',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'upgrade',
        method: 'POST',
        path: '/core/firmware/upgrade',
        description: 'Upgrade to new firmware version',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'audit',
        method: 'POST',
        path: '/core/firmware/audit',
        description: 'Run security audit on installed packages',
        category: 'Firmware',
        requiresAuth: true,
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'changelog',
        method: 'POST',
        path: '/core/firmware/changelog/{version}',
        description: 'Get changelog for specific version',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'version', type: 'string', required: true, description: 'Version number' }],
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'details',
        method: 'GET',
        path: '/core/firmware/details/{pkg_name}',
        description: 'Get detailed information about a package',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'pkg_name', type: 'string', required: true, description: 'Package name' }],
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'install',
        method: 'POST',
        path: '/core/firmware/install/{pkg_name}',
        description: 'Install a specific package',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'pkg_name', type: 'string', required: true, description: 'Package to install' }],
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'remove',
        method: 'POST',
        path: '/core/firmware/remove/{pkg_name}',
        description: 'Remove a specific package',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'pkg_name', type: 'string', required: true, description: 'Package to remove' }],
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'lock',
        method: 'POST',
        path: '/core/firmware/lock/{pkg_name}',
        description: 'Lock package to prevent updates',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'pkg_name', type: 'string', required: true, description: 'Package to lock' }],
      },
      {
        module: 'core',
        controller: 'firmware',
        action: 'unlock',
        method: 'POST',
        path: '/core/firmware/unlock/{pkg_name}',
        description: 'Unlock package to allow updates',
        category: 'Firmware',
        requiresAuth: true,
        parameters: [{ name: 'pkg_name', type: 'string', required: true, description: 'Package to unlock' }],
      },
    ],
  },

  FIREWALL: {
    name: 'Firewall Management',
    description: 'Firewall rules, aliases, and configuration',
    endpoints: [
      {
        module: 'firewall',
        controller: 'filter',
        action: 'search_rule',
        method: 'POST',
        path: '/firewall/filter/search_rule',
        description: 'Search and list firewall rules with filtering options',
        category: 'Firewall Rules',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
          sort: {},
        },
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'add_rule',
        method: 'POST',
        path: '/firewall/filter/add_rule',
        description: 'Add a new firewall rule',
        category: 'Firewall Rules',
        requiresAuth: true,
        body: {
          enabled: '1',
          sequence: '1',
          action: 'pass',
          interface: 'lan',
          direction: 'in',
          ipprotocol: 'inet',
          protocol: 'any',
          source_net: 'any',
          source_port: '',
          destination_net: 'any',
          destination_port: '',
          description: '',
        },
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'get_rule',
        method: 'GET',
        path: '/firewall/filter/get_rule/{uuid}',
        description: 'Get details of a specific firewall rule',
        category: 'Firewall Rules',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Rule UUID' }],
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'set_rule',
        method: 'POST',
        path: '/firewall/filter/set_rule/{uuid}',
        description: 'Update an existing firewall rule',
        category: 'Firewall Rules',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Rule UUID' }],
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'del_rule',
        method: 'POST',
        path: '/firewall/filter/del_rule/{uuid}',
        description: 'Delete a firewall rule',
        category: 'Firewall Rules',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Rule UUID' }],
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'toggle_rule',
        method: 'POST',
        path: '/firewall/filter/toggle_rule/{uuid}/{enabled}',
        description: 'Enable or disable a firewall rule',
        category: 'Firewall Rules',
        requiresAuth: true,
        parameters: [
          { name: 'uuid', type: 'string', required: true, description: 'Rule UUID' },
          {
            name: 'enabled',
            type: 'string',
            required: true,
            description: '1 to enable, 0 to disable',
            enum: ['0', '1'],
          },
        ],
      },
      {
        module: 'firewall',
        controller: 'filter',
        action: 'get_interface_list',
        method: 'GET',
        path: '/firewall/filter/get_interface_list',
        description: 'Get list of available network interfaces for rules',
        category: 'Firewall Rules',
        requiresAuth: true,
      },

      {
        module: 'firewall',
        controller: 'alias',
        action: 'search_item',
        method: 'POST',
        path: '/firewall/alias/search_item',
        description: 'Search and list firewall aliases',
        category: 'Firewall Aliases',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'firewall',
        controller: 'alias',
        action: 'add_item',
        method: 'POST',
        path: '/firewall/alias/add_item',
        description: 'Add a new firewall alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        body: {
          enabled: '1',
          name: '',
          type: 'host',
          content: '',
          description: '',
        },
      },
      {
        module: 'firewall',
        controller: 'alias',
        action: 'get_item',
        method: 'GET',
        path: '/firewall/alias/get_item/{uuid}',
        description: 'Get details of a specific alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Alias UUID' }],
      },
      {
        module: 'firewall',
        controller: 'alias',
        action: 'set_item',
        method: 'POST',
        path: '/firewall/alias/set_item/{uuid}',
        description: 'Update an existing alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Alias UUID' }],
      },
      {
        module: 'firewall',
        controller: 'alias',
        action: 'del_item',
        method: 'POST',
        path: '/firewall/alias/del_item/{uuid}',
        description: 'Delete an alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Alias UUID' }],
      },
      {
        module: 'firewall',
        controller: 'alias',
        action: 'reconfigure',
        method: 'POST',
        path: '/firewall/alias/reconfigure',
        description: 'Apply alias configuration changes',
        category: 'Firewall Aliases',
        requiresAuth: true,
      },

      {
        module: 'firewall',
        controller: 'alias_util',
        action: 'aliases',
        method: 'GET',
        path: '/firewall/alias_util/aliases',
        description: 'Get all available aliases',
        category: 'Firewall Aliases',
        requiresAuth: true,
      },
      {
        module: 'firewall',
        controller: 'alias_util',
        action: 'list',
        method: 'GET',
        path: '/firewall/alias_util/list/{alias}',
        description: 'List all entries in an alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'alias', type: 'string', required: true, description: 'Alias name' }],
      },
      {
        module: 'firewall',
        controller: 'alias_util',
        action: 'add',
        method: 'POST',
        path: '/firewall/alias_util/add/{alias}',
        description: 'Add entry to an alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'alias', type: 'string', required: true, description: 'Alias name' }],
        body: {
          address: 'IP address or hostname',
        },
      },
      {
        module: 'firewall',
        controller: 'alias_util',
        action: 'delete',
        method: 'POST',
        path: '/firewall/alias_util/delete/{alias}',
        description: 'Delete entry from an alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'alias', type: 'string', required: true, description: 'Alias name' }],
        body: {
          address: 'IP address or hostname to remove',
        },
      },
      {
        module: 'firewall',
        controller: 'alias_util',
        action: 'flush',
        method: 'POST',
        path: '/firewall/alias_util/flush/{alias}',
        description: 'Remove all entries from an alias',
        category: 'Firewall Aliases',
        requiresAuth: true,
        parameters: [{ name: 'alias', type: 'string', required: true, description: 'Alias name' }],
      },
    ],
  },

  DIAGNOSTICS: {
    name: 'System Diagnostics',
    description: 'System diagnostics and monitoring tools',
    endpoints: [
      {
        module: 'diagnostics',
        controller: 'activity',
        action: 'get_activity',
        method: 'GET',
        path: '/diagnostics/activity/get_activity',
        description: 'Get system activity and process information',
        category: 'System Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'cpu_usage',
        action: 'get_cpu_type',
        method: 'GET',
        path: '/diagnostics/cpu_usage/get_cpu_type',
        description: 'Get CPU type and specifications',
        category: 'System Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'cpu_usage',
        action: 'stream',
        method: 'GET',
        path: '/diagnostics/cpu_usage/stream',
        description: 'Stream real-time CPU usage data',
        category: 'System Diagnostics',
        requiresAuth: true,
        responseType: 'stream',
      },
      {
        module: 'diagnostics',
        controller: 'system',
        action: 'memory',
        method: 'GET',
        path: '/diagnostics/system/memory',
        description: 'Get memory usage information',
        category: 'System Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'system',
        action: 'system_information',
        method: 'GET',
        path: '/diagnostics/system/system_information',
        description: 'Get comprehensive system information',
        category: 'System Diagnostics',
        requiresAuth: true,
      },

      {
        module: 'diagnostics',
        controller: 'firewall',
        action: 'log',
        method: 'GET',
        path: '/diagnostics/firewall/log',
        description: 'Get firewall log entries',
        category: 'Firewall Diagnostics',
        requiresAuth: true,
        parameters: [
          { name: 'limit', type: 'integer', required: false, description: 'Number of entries to return', default: 100 },
          { name: 'filter', type: 'string', required: false, description: 'Filter text' },
        ],
      },
      {
        module: 'diagnostics',
        controller: 'firewall',
        action: 'pf_states',
        method: 'GET',
        path: '/diagnostics/firewall/pf_states',
        description: 'Get packet filter state table',
        category: 'Firewall Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'firewall',
        action: 'query_states',
        method: 'POST',
        path: '/diagnostics/firewall/query_states',
        description: 'Query firewall states with filters',
        category: 'Firewall Diagnostics',
        requiresAuth: true,
        body: {
          filter: '',
          limit: 100,
        },
      },
      {
        module: 'diagnostics',
        controller: 'firewall',
        action: 'flush_states',
        method: 'POST',
        path: '/diagnostics/firewall/flush_states',
        description: 'Flush firewall state table',
        category: 'Firewall Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'firewall',
        action: 'stats',
        method: 'GET',
        path: '/diagnostics/firewall/stats',
        description: 'Get firewall statistics',
        category: 'Firewall Diagnostics',
        requiresAuth: true,
      },

      {
        module: 'diagnostics',
        controller: 'interface',
        action: 'get_arp',
        method: 'GET',
        path: '/diagnostics/interface/get_arp',
        description: 'Get ARP table entries',
        category: 'Network Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'interface',
        action: 'get_routes',
        method: 'GET',
        path: '/diagnostics/interface/get_routes',
        description: 'Get routing table',
        category: 'Network Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'interface',
        action: 'get_interface_statistics',
        method: 'GET',
        path: '/diagnostics/interface/get_interface_statistics',
        description: 'Get interface traffic statistics',
        category: 'Network Diagnostics',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'interface',
        action: 'flush_arp',
        method: 'POST',
        path: '/diagnostics/interface/flush_arp',
        description: 'Flush ARP table',
        category: 'Network Diagnostics',
        requiresAuth: true,
      },

      {
        module: 'diagnostics',
        controller: 'ping',
        action: 'get',
        method: 'GET',
        path: '/diagnostics/ping/get',
        description: 'Get ping configuration',
        category: 'Network Tools',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'ping',
        action: 'set',
        method: 'POST',
        path: '/diagnostics/ping/set',
        description: 'Set ping configuration',
        category: 'Network Tools',
        requiresAuth: true,
        body: {
          hostname: '',
          count: 3,
          packetsize: 56,
          source: '',
        },
      },
      {
        module: 'diagnostics',
        controller: 'ping',
        action: 'start',
        method: 'POST',
        path: '/diagnostics/ping/start/{jobid}',
        description: 'Start ping job',
        category: 'Network Tools',
        requiresAuth: true,
        parameters: [{ name: 'jobid', type: 'string', required: true, description: 'Job identifier' }],
      },
      {
        module: 'diagnostics',
        controller: 'traceroute',
        action: 'get',
        method: 'GET',
        path: '/diagnostics/traceroute/get',
        description: 'Get traceroute configuration',
        category: 'Network Tools',
        requiresAuth: true,
      },
      {
        module: 'diagnostics',
        controller: 'traceroute',
        action: 'set',
        method: 'POST',
        path: '/diagnostics/traceroute/set',
        description: 'Set traceroute configuration',
        category: 'Network Tools',
        requiresAuth: true,
        body: {
          hostname: '',
          maxhops: 18,
          source: '',
        },
      },
    ],
  },

  INTERFACES: {
    name: 'Network Interfaces',
    description: 'Network interface management and configuration',
    endpoints: [
      {
        module: 'interfaces',
        controller: 'overview',
        action: 'get_interface',
        method: 'GET',
        path: '/interfaces/overview/get_interface/{if}',
        description: 'Get detailed information for a specific interface',
        category: 'Interfaces',
        requiresAuth: true,
        parameters: [{ name: 'if', type: 'string', required: true, description: 'Interface name (e.g., lan, wan)' }],
      },
      {
        module: 'interfaces',
        controller: 'overview',
        action: 'interfaces_info',
        method: 'GET',
        path: '/interfaces/overview/interfaces_info/{details}',
        description: 'Get information for all interfaces',
        category: 'Interfaces',
        requiresAuth: true,
        parameters: [
          { name: 'details', type: 'string', required: false, description: 'Include detailed info', default: '0' },
        ],
      },
      {
        module: 'interfaces',
        controller: 'overview',
        action: 'reload_interface',
        method: 'POST',
        path: '/interfaces/overview/reload_interface/{identifier}',
        description: 'Reload/restart a network interface',
        category: 'Interfaces',
        requiresAuth: true,
        parameters: [{ name: 'identifier', type: 'string', required: true, description: 'Interface identifier' }],
      },

      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'search_item',
        method: 'POST',
        path: '/interfaces/vlan_settings/search_item',
        description: 'Search and list VLAN interfaces',
        category: 'VLAN',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'add_item',
        method: 'POST',
        path: '/interfaces/vlan_settings/add_item',
        description: 'Add a new VLAN interface',
        category: 'VLAN',
        requiresAuth: true,
        body: {
          device: '',
          tag: '',
          pcp: '',
          description: '',
        },
      },
      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'get_item',
        method: 'GET',
        path: '/interfaces/vlan_settings/get_item/{uuid}',
        description: 'Get VLAN configuration details',
        category: 'VLAN',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'VLAN UUID' }],
      },
      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'set_item',
        method: 'POST',
        path: '/interfaces/vlan_settings/set_item/{uuid}',
        description: 'Update VLAN configuration',
        category: 'VLAN',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'VLAN UUID' }],
      },
      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'del_item',
        method: 'POST',
        path: '/interfaces/vlan_settings/del_item/{uuid}',
        description: 'Delete a VLAN interface',
        category: 'VLAN',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'VLAN UUID' }],
      },
      {
        module: 'interfaces',
        controller: 'vlan_settings',
        action: 'reconfigure',
        method: 'POST',
        path: '/interfaces/vlan_settings/reconfigure',
        description: 'Apply VLAN configuration changes',
        category: 'VLAN',
        requiresAuth: true,
      },
    ],
  },

  OPENVPN: {
    name: 'OpenVPN',
    description: 'OpenVPN server and client management',
    endpoints: [
      {
        module: 'openvpn',
        controller: 'instances',
        action: 'search',
        method: 'POST',
        path: '/openvpn/instances/search',
        description: 'Search and list OpenVPN instances',
        category: 'OpenVPN',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'openvpn',
        controller: 'instances',
        action: 'add',
        method: 'POST',
        path: '/openvpn/instances/add',
        description: 'Add a new OpenVPN instance',
        category: 'OpenVPN',
        requiresAuth: true,
        body: {
          enabled: '1',
          description: '',
          role: 'server',
          dev_type: 'tun',
          protocol: 'udp',
          port: '1194',
        },
      },
      {
        module: 'openvpn',
        controller: 'instances',
        action: 'get',
        method: 'GET',
        path: '/openvpn/instances/get/{uuid}',
        description: 'Get OpenVPN instance configuration',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Instance UUID' }],
      },
      {
        module: 'openvpn',
        controller: 'instances',
        action: 'del',
        method: 'POST',
        path: '/openvpn/instances/del/{uuid}',
        description: 'Delete an OpenVPN instance',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Instance UUID' }],
      },
      {
        module: 'openvpn',
        controller: 'instances',
        action: 'toggle',
        method: 'POST',
        path: '/openvpn/instances/toggle/{uuid}/{enabled}',
        description: 'Enable or disable an OpenVPN instance',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [
          { name: 'uuid', type: 'string', required: true, description: 'Instance UUID' },
          {
            name: 'enabled',
            type: 'string',
            required: true,
            description: '1 to enable, 0 to disable',
            enum: ['0', '1'],
          },
        ],
      },

      {
        module: 'openvpn',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/openvpn/service/reconfigure',
        description: 'Reconfigure OpenVPN service',
        category: 'OpenVPN',
        requiresAuth: true,
      },
      {
        module: 'openvpn',
        controller: 'service',
        action: 'start_service',
        method: 'POST',
        path: '/openvpn/service/start_service/{id}',
        description: 'Start OpenVPN service instance',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [{ name: 'id', type: 'string', required: true, description: 'Service ID' }],
      },
      {
        module: 'openvpn',
        controller: 'service',
        action: 'stop_service',
        method: 'POST',
        path: '/openvpn/service/stop_service/{id}',
        description: 'Stop OpenVPN service instance',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [{ name: 'id', type: 'string', required: true, description: 'Service ID' }],
      },
      {
        module: 'openvpn',
        controller: 'service',
        action: 'restart_service',
        method: 'POST',
        path: '/openvpn/service/restart_service/{id}',
        description: 'Restart OpenVPN service instance',
        category: 'OpenVPN',
        requiresAuth: true,
        parameters: [{ name: 'id', type: 'string', required: true, description: 'Service ID' }],
      },
    ],
  },

  IPSEC: {
    name: 'IPsec',
    description: 'IPsec VPN configuration and management',
    endpoints: [
      {
        module: 'ipsec',
        controller: 'connections',
        action: 'search_connection',
        method: 'POST',
        path: '/ipsec/connections/search_connection',
        description: 'Search and list IPsec connections',
        category: 'IPsec',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'ipsec',
        controller: 'connections',
        action: 'add_connection',
        method: 'POST',
        path: '/ipsec/connections/add_connection',
        description: 'Add a new IPsec connection',
        category: 'IPsec',
        requiresAuth: true,
        body: {
          enabled: '1',
          description: '',
          local_addresses: '',
          remote_addresses: '',
          version: 'ike2',
        },
      },
      {
        module: 'ipsec',
        controller: 'connections',
        action: 'get_connection',
        method: 'GET',
        path: '/ipsec/connections/get_connection/{uuid}',
        description: 'Get IPsec connection details',
        category: 'IPsec',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Connection UUID' }],
      },
      {
        module: 'ipsec',
        controller: 'connections',
        action: 'del_connection',
        method: 'POST',
        path: '/ipsec/connections/del_connection/{uuid}',
        description: 'Delete an IPsec connection',
        category: 'IPsec',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Connection UUID' }],
      },
      {
        module: 'ipsec',
        controller: 'connections',
        action: 'toggle_connection',
        method: 'POST',
        path: '/ipsec/connections/toggle_connection/{uuid}/{enabled}',
        description: 'Enable or disable an IPsec connection',
        category: 'IPsec',
        requiresAuth: true,
        parameters: [
          { name: 'uuid', type: 'string', required: true, description: 'Connection UUID' },
          {
            name: 'enabled',
            type: 'string',
            required: true,
            description: '1 to enable, 0 to disable',
            enum: ['0', '1'],
          },
        ],
      },

      {
        module: 'ipsec',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/ipsec/service/start',
        description: 'Start IPsec service',
        category: 'IPsec',
        requiresAuth: true,
      },
      {
        module: 'ipsec',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/ipsec/service/stop',
        description: 'Stop IPsec service',
        category: 'IPsec',
        requiresAuth: true,
      },
      {
        module: 'ipsec',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/ipsec/service/restart',
        description: 'Restart IPsec service',
        category: 'IPsec',
        requiresAuth: true,
      },
      {
        module: 'ipsec',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/ipsec/service/status',
        description: 'Get IPsec service status',
        category: 'IPsec',
        requiresAuth: true,
      },
    ],
  },

  AUTH: {
    name: 'Authentication',
    description: 'User, group, and API key management',
    endpoints: [
      {
        module: 'auth',
        controller: 'user',
        action: 'search',
        method: 'POST',
        path: '/auth/user/search',
        description: 'Search and list system users',
        category: 'User Management',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'auth',
        controller: 'user',
        action: 'add',
        method: 'POST',
        path: '/auth/user/add',
        description: 'Add a new user',
        category: 'User Management',
        requiresAuth: true,
        body: {
          disabled: '0',
          username: '',
          password: '',
          full_name: '',
          email: '',
          comment: '',
          expires: '',
          groups: '',
        },
      },
      {
        module: 'auth',
        controller: 'user',
        action: 'get',
        method: 'GET',
        path: '/auth/user/get/{uuid}',
        description: 'Get user details',
        category: 'User Management',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'User UUID' }],
      },
      {
        module: 'auth',
        controller: 'user',
        action: 'set',
        method: 'POST',
        path: '/auth/user/set/{uuid}',
        description: 'Update user information',
        category: 'User Management',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'User UUID' }],
      },
      {
        module: 'auth',
        controller: 'user',
        action: 'del',
        method: 'POST',
        path: '/auth/user/del/{uuid}',
        description: 'Delete a user',
        category: 'User Management',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'User UUID' }],
      },

      {
        module: 'auth',
        controller: 'user',
        action: 'add_api_key',
        method: 'POST',
        path: '/auth/user/add_api_key/{username}',
        description: 'Generate new API key for user',
        category: 'API Keys',
        requiresAuth: true,
        parameters: [{ name: 'username', type: 'string', required: true, description: 'Username' }],
      },
      {
        module: 'auth',
        controller: 'user',
        action: 'del_api_key',
        method: 'POST',
        path: '/auth/user/del_api_key/{id}',
        description: 'Delete an API key',
        category: 'API Keys',
        requiresAuth: true,
        parameters: [{ name: 'id', type: 'string', required: true, description: 'API key ID' }],
      },

      {
        module: 'auth',
        controller: 'group',
        action: 'search',
        method: 'POST',
        path: '/auth/group/search',
        description: 'Search and list user groups',
        category: 'Group Management',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'auth',
        controller: 'group',
        action: 'add',
        method: 'POST',
        path: '/auth/group/add',
        description: 'Add a new group',
        category: 'Group Management',
        requiresAuth: true,
        body: {
          name: '',
          description: '',
          member: [],
        },
      },
      {
        module: 'auth',
        controller: 'group',
        action: 'get',
        method: 'GET',
        path: '/auth/group/get/{uuid}',
        description: 'Get group details',
        category: 'Group Management',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Group UUID' }],
      },
      {
        module: 'auth',
        controller: 'group',
        action: 'del',
        method: 'POST',
        path: '/auth/group/del/{uuid}',
        description: 'Delete a group',
        category: 'Group Management',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Group UUID' }],
      },
    ],
  },
};

export const PLUGIN_API_MODULES = {
  WIREGUARD: {
    name: 'WireGuard',
    description: 'WireGuard VPN plugin management',
    endpoints: [
      {
        module: 'wireguard',
        controller: 'general',
        action: 'get',
        method: 'GET',
        path: '/wireguard/general/get',
        description: 'Get WireGuard general settings and enabled status',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'general',
        action: 'set',
        method: 'POST',
        path: '/wireguard/general/set',
        description: 'Update WireGuard general settings',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          general: { enabled: '1' },
        },
      },

      {
        module: 'wireguard',
        controller: 'server',
        action: 'searchServer',
        method: 'POST',
        path: '/wireguard/server/searchServer',
        description: 'Search and list WireGuard servers',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'getServer',
        method: 'GET',
        path: '/wireguard/server/getServer/{uuid}',
        description: 'Get WireGuard server configuration',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'addServer',
        method: 'POST',
        path: '/wireguard/server/addServer',
        description: 'Add a new WireGuard server',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          enabled: '1',
          name: '',
          port: '51820',
          pubkey: '',
          privkey: '',
          tunneladdress: '',
        },
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'setServer',
        method: 'POST',
        path: '/wireguard/server/setServer/{uuid}',
        description: 'Update WireGuard server configuration',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'delServer',
        method: 'POST',
        path: '/wireguard/server/delServer/{uuid}',
        description: 'Delete a WireGuard server',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'toggleServer',
        method: 'POST',
        path: '/wireguard/server/toggleServer/{uuid}',
        description: 'Toggle WireGuard server enabled state',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'server',
        action: 'key_pair',
        method: 'GET',
        path: '/wireguard/server/key_pair',
        description: 'Generate a new WireGuard key pair',
        category: 'WireGuard',
        requiresAuth: true,
      },

      {
        module: 'wireguard',
        controller: 'client',
        action: 'searchClient',
        method: 'POST',
        path: '/wireguard/client/searchClient',
        description: 'Search and list WireGuard clients',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'getClient',
        method: 'GET',
        path: '/wireguard/client/getClient/{uuid}',
        description: 'Get WireGuard client configuration',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Client UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'addClient',
        method: 'POST',
        path: '/wireguard/client/addClient',
        description: 'Add a new WireGuard client',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          enabled: '1',
          name: '',
          pubkey: '',
          tunneladdress: '',
          servers: '',
        },
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'setClient',
        method: 'POST',
        path: '/wireguard/client/setClient/{uuid}',
        description: 'Update WireGuard client configuration',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Client UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'delClient',
        method: 'POST',
        path: '/wireguard/client/delClient/{uuid}',
        description: 'Delete a WireGuard client',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Client UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'toggleClient',
        method: 'POST',
        path: '/wireguard/client/toggleClient/{uuid}',
        description: 'Toggle WireGuard client enabled state',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Client UUID' }],
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'list_servers',
        method: 'GET',
        path: '/wireguard/client/list_servers',
        description: 'List available WireGuard servers for clients',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'client',
        action: 'get_server_info',
        method: 'GET',
        path: '/wireguard/client/get_server_info/{uuid}',
        description: 'Get server information for client configuration',
        category: 'WireGuard',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },

      {
        module: 'wireguard',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/wireguard/service/reconfigure',
        description: 'Reconfigure WireGuard service',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/wireguard/service/start',
        description: 'Start WireGuard service',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/wireguard/service/stop',
        description: 'Stop WireGuard service',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/wireguard/service/restart',
        description: 'Restart WireGuard service',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/wireguard/service/status',
        description: 'Get WireGuard service status',
        category: 'WireGuard',
        requiresAuth: true,
      },
      {
        module: 'wireguard',
        controller: 'service',
        action: 'show',
        method: 'POST',
        path: '/wireguard/service/show',
        description: 'Show WireGuard service detailed status',
        category: 'WireGuard',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
    ],
  },

  NGINX: {
    name: 'Nginx',
    description: 'Nginx web server and reverse proxy',
    endpoints: [
      {
        module: 'nginx',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/nginx/service/status',
        description: 'Get Nginx service status',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/nginx/service/start',
        description: 'Start Nginx service',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/nginx/service/stop',
        description: 'Stop Nginx service',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/nginx/service/restart',
        description: 'Restart Nginx service',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/nginx/service/reconfigure',
        description: 'Reconfigure Nginx service',
        category: 'Nginx',
        requiresAuth: true,
      },

      {
        module: 'nginx',
        controller: 'settings',
        action: 'get',
        method: 'GET',
        path: '/nginx/settings/get',
        description: 'Get Nginx configuration',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'set',
        method: 'POST',
        path: '/nginx/settings/set',
        description: 'Update Nginx configuration',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'searchhttpserver',
        method: 'POST',
        path: '/nginx/settings/searchhttpserver',
        description: 'Search HTTP servers',
        category: 'Nginx',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'addhttpserver',
        method: 'POST',
        path: '/nginx/settings/addhttpserver',
        description: 'Add new HTTP server',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'gethttpserver',
        method: 'GET',
        path: '/nginx/settings/gethttpserver/{uuid}',
        description: 'Get HTTP server configuration',
        category: 'Nginx',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'sethttpserver',
        method: 'POST',
        path: '/nginx/settings/sethttpserver/{uuid}',
        description: 'Update HTTP server configuration',
        category: 'Nginx',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },
      {
        module: 'nginx',
        controller: 'settings',
        action: 'delhttpserver',
        method: 'POST',
        path: '/nginx/settings/delhttpserver/{uuid}',
        description: 'Delete HTTP server',
        category: 'Nginx',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Server UUID' }],
      },

      {
        module: 'nginx',
        controller: 'logs',
        action: 'accesses',
        method: 'GET',
        path: '/nginx/logs/accesses',
        description: 'Get Nginx access logs',
        category: 'Nginx',
        requiresAuth: true,
      },
      {
        module: 'nginx',
        controller: 'logs',
        action: 'errors',
        method: 'GET',
        path: '/nginx/logs/errors',
        description: 'Get Nginx error logs',
        category: 'Nginx',
        requiresAuth: true,
      },
    ],
  },

  HAPROXY: {
    name: 'HAProxy',
    description: 'HAProxy load balancer',
    endpoints: [
      {
        module: 'haproxy',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/haproxy/service/status',
        description: 'Get HAProxy service status',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/haproxy/service/start',
        description: 'Start HAProxy service',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/haproxy/service/stop',
        description: 'Stop HAProxy service',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/haproxy/service/restart',
        description: 'Restart HAProxy service',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/haproxy/service/reconfigure',
        description: 'Reconfigure HAProxy service',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'service',
        action: 'configtest',
        method: 'GET',
        path: '/haproxy/service/configtest',
        description: 'Test HAProxy configuration',
        category: 'HAProxy',
        requiresAuth: true,
      },

      {
        module: 'haproxy',
        controller: 'settings',
        action: 'get',
        method: 'GET',
        path: '/haproxy/settings/get',
        description: 'Get HAProxy configuration',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'settings',
        action: 'set',
        method: 'POST',
        path: '/haproxy/settings/set',
        description: 'Update HAProxy configuration',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'settings',
        action: 'search_backends',
        method: 'POST',
        path: '/haproxy/settings/search_backends',
        description: 'Search HAProxy backends',
        category: 'HAProxy',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'haproxy',
        controller: 'settings',
        action: 'add_backend',
        method: 'POST',
        path: '/haproxy/settings/add_backend',
        description: 'Add new HAProxy backend',
        category: 'HAProxy',
        requiresAuth: true,
      },
      {
        module: 'haproxy',
        controller: 'settings',
        action: 'search_frontends',
        method: 'POST',
        path: '/haproxy/settings/search_frontends',
        description: 'Search HAProxy frontends',
        category: 'HAProxy',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'haproxy',
        controller: 'settings',
        action: 'add_frontend',
        method: 'POST',
        path: '/haproxy/settings/add_frontend',
        description: 'Add new HAProxy frontend',
        category: 'HAProxy',
        requiresAuth: true,
      },

      {
        module: 'haproxy',
        controller: 'statistics',
        action: 'info',
        method: 'GET',
        path: '/haproxy/statistics/info',
        description: 'Get HAProxy statistics',
        category: 'HAProxy',
        requiresAuth: true,
      },
    ],
  },

  BIND: {
    name: 'BIND DNS',
    description: 'BIND DNS server management',
    endpoints: [
      {
        module: 'bind',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/bind/service/status',
        description: 'Get BIND service status',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/bind/service/start',
        description: 'Start BIND service',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/bind/service/stop',
        description: 'Stop BIND service',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/bind/service/restart',
        description: 'Restart BIND service',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/bind/service/reconfigure',
        description: 'Reconfigure BIND service',
        category: 'BIND',
        requiresAuth: true,
      },

      {
        module: 'bind',
        controller: 'general',
        action: 'get',
        method: 'GET',
        path: '/bind/general/get',
        description: 'Get BIND general settings',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'general',
        action: 'set',
        method: 'POST',
        path: '/bind/general/set',
        description: 'Update BIND general settings',
        category: 'BIND',
        requiresAuth: true,
      },

      {
        module: 'bind',
        controller: 'domain',
        action: 'get',
        method: 'GET',
        path: '/bind/domain/get',
        description: 'Get domain configuration',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'domain',
        action: 'search_primary_domain',
        method: 'POST',
        path: '/bind/domain/search_primary_domain',
        description: 'Search primary domains',
        category: 'BIND',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'bind',
        controller: 'domain',
        action: 'add_primary_domain',
        method: 'POST',
        path: '/bind/domain/add_primary_domain',
        description: 'Add new primary domain',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'domain',
        action: 'get_domain',
        method: 'GET',
        path: '/bind/domain/get_domain/{uuid}',
        description: 'Get specific domain details',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Domain UUID' }],
      },
      {
        module: 'bind',
        controller: 'domain',
        action: 'set_domain',
        method: 'POST',
        path: '/bind/domain/set_domain/{uuid}',
        description: 'Update domain configuration',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Domain UUID' }],
      },
      {
        module: 'bind',
        controller: 'domain',
        action: 'del_domain',
        method: 'POST',
        path: '/bind/domain/del_domain/{uuid}',
        description: 'Delete domain',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Domain UUID' }],
      },

      {
        module: 'bind',
        controller: 'record',
        action: 'search_record',
        method: 'POST',
        path: '/bind/record/search_record',
        description: 'Search DNS records',
        category: 'BIND',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'bind',
        controller: 'record',
        action: 'add_record',
        method: 'POST',
        path: '/bind/record/add_record',
        description: 'Add new DNS record',
        category: 'BIND',
        requiresAuth: true,
      },
      {
        module: 'bind',
        controller: 'record',
        action: 'get_record',
        method: 'GET',
        path: '/bind/record/get_record/{uuid}',
        description: 'Get specific DNS record',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Record UUID' }],
      },
      {
        module: 'bind',
        controller: 'record',
        action: 'set_record',
        method: 'POST',
        path: '/bind/record/set_record/{uuid}',
        description: 'Update DNS record',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Record UUID' }],
      },
      {
        module: 'bind',
        controller: 'record',
        action: 'del_record',
        method: 'POST',
        path: '/bind/record/del_record/{uuid}',
        description: 'Delete DNS record',
        category: 'BIND',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Record UUID' }],
      },
    ],
  },

  CADDY: {
    name: 'Caddy',
    description: 'Caddy web server and reverse proxy',
    endpoints: [
      {
        module: 'caddy',
        controller: 'service',
        action: 'status',
        method: 'GET',
        path: '/caddy/service/status',
        description: 'Get Caddy service status',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'service',
        action: 'start',
        method: 'POST',
        path: '/caddy/service/start',
        description: 'Start Caddy service',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'service',
        action: 'stop',
        method: 'POST',
        path: '/caddy/service/stop',
        description: 'Stop Caddy service',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'service',
        action: 'restart',
        method: 'POST',
        path: '/caddy/service/restart',
        description: 'Restart Caddy service',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'service',
        action: 'reconfigure',
        method: 'POST',
        path: '/caddy/service/reconfigure',
        description: 'Reconfigure Caddy service',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'service',
        action: 'validate',
        method: 'GET',
        path: '/caddy/service/validate',
        description: 'Validate Caddy configuration',
        category: 'Caddy',
        requiresAuth: true,
      },

      {
        module: 'caddy',
        controller: 'general',
        action: 'get',
        method: 'GET',
        path: '/caddy/general/get',
        description: 'Get Caddy general settings',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'general',
        action: 'set',
        method: 'POST',
        path: '/caddy/general/set',
        description: 'Update Caddy general settings',
        category: 'Caddy',
        requiresAuth: true,
      },

      {
        module: 'caddy',
        controller: 'reverse_proxy',
        action: 'search_reverse_proxy',
        method: 'POST',
        path: '/caddy/reverse_proxy/search_reverse_proxy',
        description: 'Search reverse proxy configurations',
        category: 'Caddy',
        requiresAuth: true,
        body: {
          current: 1,
          rowCount: 25,
          searchPhrase: '',
        },
      },
      {
        module: 'caddy',
        controller: 'reverse_proxy',
        action: 'add_reverse_proxy',
        method: 'POST',
        path: '/caddy/reverse_proxy/add_reverse_proxy',
        description: 'Add new reverse proxy',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'reverse_proxy',
        action: 'get_reverse_proxy',
        method: 'GET',
        path: '/caddy/reverse_proxy/get_reverse_proxy/{uuid}',
        description: 'Get specific reverse proxy configuration',
        category: 'Caddy',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Proxy UUID' }],
      },
      {
        module: 'caddy',
        controller: 'reverse_proxy',
        action: 'set_reverse_proxy',
        method: 'POST',
        path: '/caddy/reverse_proxy/set_reverse_proxy/{uuid}',
        description: 'Update reverse proxy configuration',
        category: 'Caddy',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Proxy UUID' }],
      },
      {
        module: 'caddy',
        controller: 'reverse_proxy',
        action: 'del_reverse_proxy',
        method: 'POST',
        path: '/caddy/reverse_proxy/del_reverse_proxy/{uuid}',
        description: 'Delete reverse proxy',
        category: 'Caddy',
        requiresAuth: true,
        parameters: [{ name: 'uuid', type: 'string', required: true, description: 'Proxy UUID' }],
      },

      {
        module: 'caddy',
        controller: 'diagnostics',
        action: 'caddyfile',
        method: 'GET',
        path: '/caddy/diagnostics/caddyfile',
        description: 'Get generated Caddyfile',
        category: 'Caddy',
        requiresAuth: true,
      },
      {
        module: 'caddy',
        controller: 'diagnostics',
        action: 'config',
        method: 'GET',
        path: '/caddy/diagnostics/config',
        description: 'Get Caddy configuration',
        category: 'Caddy',
        requiresAuth: true,
      },
    ],
  },
};

export const TOOL_CATEGORIES = {
  'System Management': {
    description: 'Core system operations and monitoring',
    tools: [
      'get_system_status',
      'system_reboot',
      'system_halt',
      'dismiss_system_status',
      'get_system_health',
      'get_memory_usage',
      'get_disk_usage',
      'get_system_temperature',
      'get_cpu_usage',
    ],
  },
  'Firmware & Packages': {
    description: 'System firmware and package management',
    tools: [
      'firmware_get_info',
      'firmware_check_updates',
      'firmware_update',
      'firmware_upgrade',
      'firmware_audit',
      'firmware_get_changelog',
      'package_remove',
      'package_reinstall',
      'package_lock',
      'package_unlock',
      'package_get_details',
      'list_plugins',
      'install_plugin',
    ],
  },
  'Firewall Management': {
    description: 'Firewall rules and security policies',
    tools: [
      'firewall_get_rules',
      'firewall_add_rule',
      'get_firewall_rule',
      'update_firewall_rule',
      'firewall_delete_rule',
      'firewall_toggle_rule',
      'firewall_move_rule',
      'firewall_apply',
      'firewall_savepoint',
      'firewall_revert',
      'get_firewall_rule_stats',
      'perform_firewall_audit',
    ],
  },
  'Firewall Aliases': {
    description: 'Firewall alias management',
    tools: [
      'get_firewall_aliases',
      'get_firewall_alias',
      'add_firewall_alias',
      'update_firewall_alias',
      'delete_firewall_alias',
      'toggle_firewall_alias',
      'add_to_alias',
      'delete_from_alias',
      'list_alias_contents',
      'flush_alias',
      'export_firewall_aliases',
      'import_firewall_aliases',
      'get_alias_table_size',
    ],
  },
  'Network Interfaces': {
    description: 'Network interface configuration and monitoring',
    tools: [
      'get_interfaces',
      'get_interface_details',
      'reload_interface',
      'get_interface_statistics',
      'search_vlans',
      'add_vlan',
      'get_vlan',
      'update_vlan',
      'delete_vlan',
      'reconfigure_vlans',
    ],
  },
  'Network Diagnostics': {
    description: 'Network diagnostic tools',
    tools: [
      'get_arp_table',
      'search_arp_table',
      'flush_arp_table',
      'get_system_routes',
      'dns_lookup',
      'get_pf_states',
      'query_pf_states',
      'flush_firewall_states',
      'kill_firewall_states',
    ],
  },
  'DHCP Services': {
    description: 'DHCP server management',
    tools: [
      'get_dhcp_leases',
      'get_dhcp_config',
      'set_dhcp_config',
      'search_dhcp_leases',
      'search_dhcp_reservations',
      'add_dhcp_reservation',
      'get_dhcp_reservation',
      'update_dhcp_reservation',
      'delete_dhcp_reservation',
      'toggle_dhcp_reservation',
      'start_dhcp_service',
      'stop_dhcp_service',
      'restart_dhcp_service',
      'reconfigure_dhcp',
      'get_dhcp_status',
    ],
  },
  'VPN - OpenVPN': {
    description: 'OpenVPN server and client management',
    tools: [
      'get_openvpn_instances',
      'search_openvpn_instances',
      'add_openvpn_instance',
      'update_openvpn_instance',
      'delete_openvpn_instance',
      'toggle_openvpn_instance',
      'start_openvpn_service',
      'stop_openvpn_service',
      'restart_openvpn_service',
      'search_openvpn_sessions',
      'kill_openvpn_session',
    ],
  },
  'VPN - IPsec': {
    description: 'IPsec VPN configuration',
    tools: [
      'ipsec_is_enabled',
      'toggle_ipsec_service',
      'search_ipsec_connections',
      'add_ipsec_connection',
      'get_ipsec_connection',
      'update_ipsec_connection',
      'delete_ipsec_connection',
      'toggle_ipsec_connection',
      'start_ipsec',
      'stop_ipsec',
      'restart_ipsec',
      'reconfigure_ipsec',
      'search_ipsec_sessions',
      'connect_ipsec_session',
      'disconnect_ipsec_session',
    ],
  },
  'User Management': {
    description: 'User and group administration',
    tools: [
      'search_users',
      'add_user',
      'get_user',
      'update_user',
      'delete_user',
      'search_groups',
      'add_group',
      'get_group',
      'update_group',
      'delete_group',
    ],
  },
  'API & Authentication': {
    description: 'API key and certificate management',
    tools: [
      'add_api_key',
      'delete_api_key',
      'search_api_keys',
      'search_certificates',
      'add_certificate',
      'get_certificate',
      'delete_certificate',
      'search_certificate_authorities',
      'get_certificate_authority',
      'delete_certificate_authority',
    ],
  },
  'Service Management': {
    description: 'System service control',
    tools: ['search_services', 'start_service', 'stop_service', 'restart_service'],
  },
  'Configuration Management': {
    description: 'System configuration and backup',
    tools: [
      'backup_config',
      'configure_opnsense_connection',
      'get_firewall_logs',
      'get_vpn_connections',
      'get_api_endpoints',
      'exec_api_call',
    ],
  },
  'Plugin - WireGuard': {
    description: 'WireGuard VPN management',
    tools: [
      'wireguard_get_status',
      'wireguard_get_config',
      'wireguard_search_servers',
      'wireguard_search_clients',
      'wireguard_generate_keypair',
    ],
  },
  'Plugin - Web Servers': {
    description: 'Web server plugins (Nginx, HAProxy, Caddy)',
    tools: [
      'nginx_get_status',
      'nginx_get_upstreams',
      'haproxy_get_status',
      'haproxy_get_backends',
      'caddy_get_status',
      'caddy_get_config',
    ],
  },
  'Plugin - DNS & Monitoring': {
    description: 'DNS and monitoring plugins',
    tools: [
      'bind_get_status',
      'bind_get_zones',
      'netdata_get_status',
      'netdata_get_config',
      'netsnmp_get_status',
      'netsnmp_get_config',
    ],
  },
  'Plugin - Security': {
    description: 'Security enhancement plugins',
    tools: ['crowdsec_get_status', 'crowdsec_get_decisions'],
  },
};

export const PROMPT_TEMPLATES = {
  system_health_check: {
    name: 'System Health Check',
    description: 'Comprehensive system health assessment',
    prompt: `Perform a comprehensive health check of the OPNsense system:
1. Check system status and uptime
2. Review CPU and memory usage
3. Check disk space
4. Monitor interface statistics
5. Review firewall logs for anomalies
6. Check service status
7. Verify firmware update status`,
    required_tools: [
      'get_system_status',
      'get_cpu_usage',
      'get_memory_usage',
      'get_disk_usage',
      'get_interface_statistics',
      'get_firewall_logs',
      'search_services',
      'firmware_check_updates',
    ],
  },

  security_audit: {
    name: 'Security Audit',
    description: 'Perform security audit of firewall configuration',
    prompt: `Conduct a security audit of the OPNsense firewall:
1. Review all firewall rules for potential security issues
2. Check for overly permissive rules
3. Audit aliases for suspicious entries
4. Check VPN configurations
5. Review user accounts and permissions
6. Check for firmware security updates
7. Generate security recommendations`,
    required_tools: [
      'perform_firewall_audit',
      'firewall_get_rules',
      'get_firewall_aliases',
      'search_users',
      'search_api_keys',
      'firmware_audit',
      'get_vpn_connections',
    ],
  },

  network_troubleshooting: {
    name: 'Network Troubleshooting',
    description: 'Diagnose network connectivity issues',
    prompt: `Troubleshoot network connectivity issues:
1. Check interface status and statistics
2. Review ARP table
3. Check routing table
4. Analyze firewall states
5. Review DHCP leases
6. Check DNS resolution
7. Examine firewall logs for blocked traffic`,
    required_tools: [
      'get_interfaces',
      'get_interface_statistics',
      'get_arp_table',
      'get_system_routes',
      'get_pf_states',
      'get_dhcp_leases',
      'dns_lookup',
      'get_firewall_logs',
    ],
  },

  vpn_setup: {
    name: 'VPN Configuration',
    description: 'Set up and configure VPN services',
    prompt: `Configure VPN services on OPNsense:
1. List current VPN configurations
2. Check available VPN types (OpenVPN, IPsec, WireGuard)
3. Review VPN service status
4. Configure firewall rules for VPN
5. Set up user authentication
6. Test VPN connectivity`,
    required_tools: [
      'get_vpn_connections',
      'search_openvpn_instances',
      'search_ipsec_connections',
      'wireguard_get_status',
      'firewall_add_rule',
      'search_users',
      'add_user',
    ],
  },

  backup_maintenance: {
    name: 'Backup and Maintenance',
    description: 'Perform system backup and maintenance tasks',
    prompt: `Execute system maintenance tasks:
1. Create configuration backup
2. Check system updates
3. Review service status
4. Clean up old firewall states
5. Check disk usage
6. Review system logs
7. Document current configuration`,
    required_tools: [
      'backup_config',
      'firmware_check_updates',
      'search_services',
      'flush_firewall_states',
      'get_disk_usage',
      'get_firewall_logs',
      'get_system_status',
    ],
  },

  firewall_rule_management: {
    name: 'Firewall Rule Management',
    description: 'Manage firewall rules and policies',
    prompt: `Manage firewall rules effectively:
1. List all current firewall rules
2. Review rule statistics
3. Identify unused or redundant rules
4. Create rule documentation
5. Optimize rule order
6. Create aliases for common addresses
7. Apply configuration changes`,
    required_tools: [
      'firewall_get_rules',
      'get_firewall_rule_stats',
      'get_firewall_aliases',
      'add_firewall_alias',
      'firewall_move_rule',
      'firewall_savepoint',
      'firewall_apply',
    ],
  },

  plugin_management: {
    name: 'Plugin Management',
    description: 'Manage OPNsense plugins',
    prompt: `Manage OPNsense plugins:
1. List installed plugins
2. Check plugin status
3. Review available plugins
4. Check for plugin updates
5. Configure plugin settings
6. Monitor plugin performance`,
    required_tools: [
      'list_plugins',
      'wireguard_get_status',
      'nginx_get_status',
      'haproxy_get_status',
      'bind_get_status',
      'caddy_get_status',
      'firmware_check_updates',
    ],
  },
};

export const RESOURCE_SCHEMAS = {
  SystemStatus: {
    description: 'System status information',
    properties: {
      uptime: 'System uptime in seconds',
      datetime: 'Current system date and time',
      cpu_usage: 'Current CPU usage percentage',
      memory_usage: 'Memory usage information',
      disk_usage: 'Disk usage by mount point',
      temperature: 'System temperature readings',
      load_average: 'System load averages',
      kernel: 'Kernel version information',
    },
  },
  FirewallRule: {
    description: 'Firewall rule configuration',
    properties: {
      uuid: 'Unique rule identifier',
      enabled: 'Rule enabled state',
      sequence: 'Rule sequence number',
      action: 'Rule action (pass/block/reject)',
      interface: 'Network interface',
      direction: 'Traffic direction (in/out)',
      ipprotocol: 'IP protocol version (inet/inet6)',
      protocol: 'Protocol (tcp/udp/icmp/any)',
      source_net: 'Source network/address',
      source_port: 'Source port',
      destination_net: 'Destination network/address',
      destination_port: 'Destination port',
      description: 'Rule description',
      log: 'Enable logging',
      category: 'Rule category',
    },
  },
  NetworkInterface: {
    description: 'Network interface configuration',
    properties: {
      name: 'Interface name',
      device: 'Physical device',
      status: 'Interface status (up/down)',
      ipaddr: 'IPv4 address',
      subnet: 'Subnet mask',
      ipaddr6: 'IPv6 address',
      mac: 'MAC address',
      mtu: 'Maximum transmission unit',
      media: 'Media type',
      gateway: 'Default gateway',
      dns: 'DNS servers',
    },
  },
  VPNConnection: {
    description: 'VPN connection configuration',
    properties: {
      uuid: 'Connection identifier',
      type: 'VPN type (openvpn/ipsec/wireguard)',
      enabled: 'Connection enabled state',
      description: 'Connection description',
      local_address: 'Local endpoint address',
      remote_address: 'Remote endpoint address',
      status: 'Connection status',
      bytes_sent: 'Bytes transmitted',
      bytes_received: 'Bytes received',
      connected_since: 'Connection timestamp',
    },
  },
};
